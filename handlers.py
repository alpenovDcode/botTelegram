import logging
import sqlite3

import openai
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import state
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from DB import delete_receipt, check_user_exists, add_user, get_all_users, get_user_receipts, add_receipt, \
    update_receipt_status, update_user_status, update_user_tariff, get_all_questions, save_question, delete_question, \
    update_user_name, update_user_contact, save_cheat_sheet, get_cheat_sheets, save_cheat_sheet_file, \
    update_cheat_sheet, delete_cheat_sheet_file, delete_cheat_sheet, get_cheat_sheet_by_id
from keyboards import start_buttons, tariff_buttons, payment_button, admin_menu_keyboard, receipt_action_buttons, \
    user_profile_buttons, start_buttons, development_buttons, professional_buttons, upgrade_buttons, back_button, user_profile_update_buttons
from states import RegisterState, PaymentState, StartTariffState, UpgradeTariffState, BroadcastState, AnswerState, \
    EditProfileState, CheatSheetState, AddAdminState, AnswerQuestionsState
from mainBot import dp, bot
from config import ADMINS, generate_response

logger = logging.getLogger(__name__)

# questions = [
#     "–ö—Ç–æ –≤–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã?",
#     "–ö–∞–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ —Å–≤–æ–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º?",
#     "–ö–∞–∫ –≤—ã –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç–µ —Å–≤–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤?",
#     "–ö–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ —Å –∫–∞–∂–¥—ã–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º —Å–µ–≥–º–µ–Ω—Ç–æ–º?",
#     "–ö–∞–∫ –≤—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –Ω–∞ –∫–∞–∂–¥–æ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ?",
#     "–ö–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è?",
#     "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è?",
#     "–° –∫–µ–º –≤—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ—Ç–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π?",
#     "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã —Å–≤—è–∑–∞–Ω—ã —Å –≤–∞—à–∏–º –±–∏–∑–Ω–µ—Å–æ–º?"
# ]

async def delete_previous_message(message: types.Message):
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logger.error(f"Error deleting message: {e}")

def back_inline_button():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_start_menu'))
    return keyboard

# async def save_answer(message: types.Message, state: FSMContext, question_index: int):
#     user_id = message.from_user.id
#     answer = message.text
#     question = questions[question_index - 1]
#
#     conn = sqlite3.connect('database.db')
#     cursor = conn.cursor()
#     cursor.execute("INSERT INTO user_answers (user_id, question, answer) VALUES (?, ?, ?)", (user_id, question, answer))
#     conn.commit()
#     conn.close()
#
#     next_question_index = question_index
#     if next_question_index < len(questions):
#         await state.update_data(question_index=next_question_index)
#         await bot.send_message(message.from_user.id, questions[next_question_index])
#         await getattr(AnswerQuestionsState, f"Q{next_question_index + 1}").set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    try:
        user_id = message.from_user.id
        await delete_previous_message(message)

        if user_id in ADMINS:
            await bot.send_message(user_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=admin_menu_keyboard())
            return

        user = check_user_exists(user_id)
        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ç–∞—Ä–∏—Ñ
            tariff = user[5]
            if tariff == "üåü –¢–∞—Ä–∏—Ñ –°—Ç–∞—Ä—Ç üåü":
                await bot.send_message(user_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ - üåü '–°—Ç–∞—Ä—Ç'.", reply_markup=start_buttons())
                await StartTariffState.in_start_menu.set()
            elif tariff == "üöÄ –¢–∞—Ä–∏—Ñ –†–∞–∑–≤–∏—Ç–∏–µ üöÄ":
                await bot.send_message(user_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ - üöÄ '–†–∞–∑–≤–∏—Ç–∏–µ'.", reply_markup=development_buttons())
                await StartTariffState.in_start_menu.set()
            elif tariff == "üíº –¢–∞—Ä–∏—Ñ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª üíº":
                await bot.send_message(user_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ - üíº '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª'.", reply_markup=professional_buttons())
                await StartTariffState.in_start_menu.set()
            else:
                await bot.send_message(user_id, "‚ùó –í–∞—à —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=tariff_buttons())
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await bot.send_message(user_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            await RegisterState.waiting_for_name.set()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: %s", e)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
@dp.message_handler(state=RegisterState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    try:
        await state.update_data(name=message.text)
        await delete_previous_message(message)
        await bot.send_message(message.from_user.id, "‚úèÔ∏è –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
        await RegisterState.waiting_for_password.set()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏: %s", e)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
@dp.message_handler(state=RegisterState.waiting_for_password)
async def process_password_register(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        name = user_data['name']
        password = message.text
        tg_id = message.from_user.id
        username = message.from_user.username

        add_user(tg_id, f"@{username}", name, password)
        await delete_previous_message(message)
        await bot.send_message(tg_id,
                               "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–∞–≤–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")

        # –ù–∞—á–∏–Ω–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        # await bot.send_message(tg_id, questions[0])
        await state.update_data(question_index=0)
        await AnswerQuestionsState.Q1.set()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è: %s", e)


# @dp.message_handler(state=AnswerQuestionsState.Q1)
# async def process_question_1(message: types.Message, state: FSMContext):
#     await save_answer(message, state, 1)
#
# @dp.message_handler(state=AnswerQuestionsState.Q2)
# async def process_question_2(message: types.Message, state: FSMContext):
#     await save_answer(message, state, 2)
#
# @dp.message_handler(state=AnswerQuestionsState.Q3)
# async def process_question_3(message: types.Message, state: FSMContext):
#     await save_answer(message, state, 3)
#
# @dp.message_handler(state=AnswerQuestionsState.Q4)
# async def process_question_4(message: types.Message, state: FSMContext):
#     await save_answer(message, state, 4)
#
# @dp.message_handler(state=AnswerQuestionsState.Q5)
# async def process_question_5(message: types.Message, state: FSMContext):
#     await save_answer(message, state, 5)
#
# @dp.message_handler(state=AnswerQuestionsState.Q6)
# async def process_question_6(message: types.Message, state: FSMContext):
#     await save_answer(message, state, 6)
#
# @dp.message_handler(state=AnswerQuestionsState.Q7)
# async def process_question_7(message: types.Message, state: FSMContext):
#     await save_answer(message, state, 7)
#
# @dp.message_handler(state=AnswerQuestionsState.Q8)
# async def process_question_8(message: types.Message, state: FSMContext):
#     await save_answer(message, state, 8)
#
# @dp.message_handler(state=AnswerQuestionsState.Q9)
# async def process_question_9(message: types.Message, state: FSMContext):
#     await save_answer(message, state, 9)
#     await state.finish()
#     await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=tariff_buttons())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤
@dp.message_handler(lambda message: message.text in ["üåü –¢–∞—Ä–∏—Ñ –°—Ç–∞—Ä—Ç üåü", "üöÄ –¢–∞—Ä–∏—Ñ –†–∞–∑–≤–∏—Ç–∏–µ üöÄ", "üíº –¢–∞—Ä–∏—Ñ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª üíº"])
async def show_tariff_details(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = check_user_exists(user_id)
    await delete_previous_message(message)

    if not user:
        await bot.send_message(user_id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.")
        return

    await state.update_data(selected_tariff=message.text)
    tariffs_info = {
        "üåü –¢–∞—Ä–∏—Ñ –°—Ç–∞—Ä—Ç üåü": (
            "üåü –¢–∞—Ä–∏—Ñ \"–°—Ç–∞—Ä—Ç\"\n"
            "–ó–∞–ª–æ–∂–∏—Ç–µ –æ—Å–Ω–æ–≤—É –≤–∞—à–µ–≥–æ —É—Å–ø–µ—Ö–∞\n\n"
            "‚úî **–ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä**\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–∏–∑–Ω–µ—Å–∞, –≤–∫–ª—é—á–∞—è –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –º–æ–¥–µ–ª—å.\n\n"
            "‚úî **–®–∞–±–ª–æ–Ω—ã**\n"
            "‚úî **–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ**\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥—É.\n\n"
            "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ä—Ç –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ —Å–µ–π—á–∞—Å –∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Å–≤–æ–µ–º—É –±–∏–∑–Ω–µ—Å—É!\n\n"
            "**–¶–µ–Ω–∞: 999–†**"
        ),
        "üöÄ –¢–∞—Ä–∏—Ñ –†–∞–∑–≤–∏—Ç–∏–µ üöÄ": (
            "üöÄ –¢–∞—Ä–∏—Ñ \"–†–∞–∑–≤–∏—Ç–∏–µ\"\n"
            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥—É\n\n"
            "‚úî **–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏**\n"
            "–í—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ç–∞—Ä–∏—Ñ–∞ \"–°—Ç–∞—Ä—Ç\" –ø–ª—é—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –≤–∞—à–∏–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º.\n\n"
            "‚úî **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è**\n"
            "–ù–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –ø–æ–º–æ–≥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ª—é–±–æ–º –∏–∑ –µ–≥–æ —ç—Ç–∞–ø–æ–≤.\n\n"
            "‚úî **–≠—Ç–∞–ø—ã**\n\n"
            "–ü—Ä–µ–æ–¥–æ–ª–µ–π—Ç–µ —Å—Ç—Ä–∞—Ö –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∫ —É—Å–ø–µ—Ö—É —Å \"–†–∞–∑–≤–∏—Ç–∏–µ–º\"!\n\n"
            "**–¶–µ–Ω–∞: 4999–†**"
        ),
        "üíº –¢–∞—Ä–∏—Ñ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª üíº": (
            "üíº –¢–∞—Ä–∏—Ñ \"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª\"\n"
            "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –≤–∞—à–µ–º—É —É—Å–ø–µ—Ö—É\n\n"
            "‚úî **–í—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ \"–°—Ç–∞—Ä—Ç\" –∏ \"–†–∞–∑–≤–∏—Ç–∏–µ\" –ø–ª—é—Å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –≤–µ–¥—É—â–∏–º–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –≤ –≤–∞—à–µ–π –æ—Ç—Ä–∞—Å–ª–∏.**\n\n"
            "‚úî **–õ–∏—á–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ**\n"
            "–° –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞.\n\n"
            "‚úî **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞, –≤–∫–ª—é—á–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π.**\n\n"
            "**–¶–µ–Ω–∞: 49999–†**"
        )
    }

    tariff_text = tariffs_info.get(message.text, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await bot.send_message(user_id, tariff_text, reply_markup=payment_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å"
@dp.callback_query_handler(lambda c: c.data == 'pay', state='*')
async def process_payment(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ.")
    await PaymentState.waiting_for_receipt.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ–∫–∞
@dp.message_handler(content_types=types.ContentType.PHOTO, state=PaymentState.waiting_for_receipt)
async def handle_receipt(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    selected_tariff = user_data.get('selected_tariff')
    receipt_photo = message.photo[-1].file_id
    tg_id = message.from_user.id
    username = message.from_user.username

    add_receipt(tg_id, username, selected_tariff, receipt_photo)
    await delete_previous_message(message)
    await bot.send_message(tg_id, "–í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=start_buttons())
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ
@dp.message_handler(lambda message: message.text == "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ", state=StartTariffState.in_profile_menu)
async def upgrade_tariff_menu(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = check_user_exists(user_id)
    await delete_previous_message(message)

    if user[5] == "üåü –¢–∞—Ä–∏—Ñ –°—Ç–∞—Ä—Ç üåü":
        keyboard = upgrade_buttons()
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboard)
        await UpgradeTariffState.waiting_for_new_tariff.set()
    elif user[5] == "üöÄ –¢–∞—Ä–∏—Ñ –†–∞–∑–≤–∏—Ç–∏–µ üöÄ":
        await state.update_data(selected_tariff="üíº –¢–∞—Ä–∏—Ñ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª üíº")
        await bot.send_message(user_id, "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ç–∞—Ä–∏—Ñ '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ.", reply_markup=payment_button())
        await UpgradeTariffState.in_payment.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
@dp.callback_query_handler(lambda c: c.data in ["upgrade_development", "upgrade_professional"], state=UpgradeTariffState.waiting_for_new_tariff)
async def process_upgrade_tariff(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    new_tariff = "üöÄ –¢–∞—Ä–∏—Ñ –†–∞–∑–≤–∏—Ç–∏–µ üöÄ" if callback_query.data == "upgrade_development" else "üíº –¢–∞—Ä–∏—Ñ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª üíº"
    await state.update_data(selected_tariff=new_tariff)
    await bot.send_message(callback_query.from_user.id, f"–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ç–∞—Ä–∏—Ñ '{new_tariff}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ.", reply_markup=payment_button())
    await PaymentState.waiting_for_receipt.set()
    logger.info(f"User {callback_query.from_user.id} selected tariff: {new_tariff}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
@dp.message_handler(lambda message: message.text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def list_users(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        await bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        await delete_previous_message(message)
        return

    users = get_all_users()
    users_text = "\n".join([f"{user[1]}: {user[2]}" for user in users])
    await bot.send_message(user_id, f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{users_text}")
    await delete_previous_message(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ß–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
@dp.message_handler(lambda message: message.text == "üìú –ß–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def list_receipts(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        await bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        await delete_previous_message(message)
        return

    receipts = get_user_receipts()
    for receipt in receipts:
        caption = f"@{receipt[2]}\n{receipt[3]}"
        receipt_photo = receipt[4]  # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        await bot.send_photo(user_id, photo=receipt_photo, caption=caption, reply_markup=receipt_action_buttons(receipt[0], receipt[3]))
    await delete_previous_message(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@dp.message_handler(lambda message: message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
                    state=[StartTariffState.in_start_menu, StartTariffState.in_profile_menu])
async def user_profile(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"Handling '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' for user {user_id}")

    user = check_user_exists(user_id)
    if not user:
        logger.info(f"User {user_id} not found in the database.")
        await delete_previous_message(message)
        await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.")
        return

    await delete_previous_message(message)
    logger.info(f"User {user_id} found: {user}")

    profile_info = f"–ò–º—è: {user[4]}\n–¢–∞—Ä–∏—Ñ: {user[5]}\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {user[2]}"
    keyboard = user_profile_update_buttons(user[5])
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_start_menu'))  # –î–æ–±–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    await bot.send_message(user_id, profile_info, reply_markup=keyboard)
    await StartTariffState.in_profile_menu.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == 'edit_name', state=StartTariffState.in_profile_menu)
async def edit_name(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await EditProfileState.waiting_for_new_name.set()

@dp.callback_query_handler(lambda c: c.data == 'edit_contact', state=StartTariffState.in_profile_menu)
async def edit_contact(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    await EditProfileState.waiting_for_new_contact.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(state=EditProfileState.waiting_for_new_name)
async def process_new_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_name = message.text
    update_user_name(user_id, new_name)
    await bot.send_message(user_id, f"–í–∞—à–µ –∏–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_name}.")
    await state.finish()
    await user_profile(message, state)

@dp.message_handler(state=EditProfileState.waiting_for_new_contact)
async def process_new_contact(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_contact = message.text
    update_user_contact(user_id, new_contact)
    await bot.send_message(user_id, f"–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {new_contact}.")
    await state.finish()
    await user_profile(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
@dp.message_handler(lambda message: message.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", state=StartTariffState.in_start_menu)
async def contact_manager(message: types.Message):
    await delete_previous_message(message)
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.", reply_markup=back_button())
    await PaymentState.waiting_for_question.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
@dp.message_handler(state=PaymentState.waiting_for_question)
async def handle_question(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    question = message.text

    save_question(user_id, f"@{username}", question)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    await delete_previous_message(message)
    await bot.send_message(user_id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.", reply_markup=start_buttons())
    await state.finish()
    await StartTariffState.in_start_menu.set()


@dp.message_handler(lambda message: message.text == "‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")
async def list_questions(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        await bot.send_message(chat_id=user_id, text="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        await delete_previous_message(message)
        return

    questions = get_all_questions()
    if questions:
        for question in questions:
            question_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {question[1]} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {question[2]}"
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{question[0]}_{question[1]}"))
            await bot.send_message(chat_id=user_id, text=question_text, reply_markup=keyboard)
    else:
        await bot.send_message(chat_id=user_id, text="–ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
    await delete_previous_message(message)

@dp.callback_query_handler(lambda c: c.data.startswith('answer_'))
async def handle_answer_button(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    data = callback_query.data.split('_')
    question_id = data[1]
    user_id = data[2]

    await state.update_data(current_user_id=user_id, question_id=question_id)
    reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    reply_markup.add(types.KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–≤–µ—Ç'))
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–≤–µ—Ç' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", reply_markup=reply_markup)
    await AnswerState.waiting_for_answer.set()

@dp.message_handler(lambda message: message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–≤–µ—Ç", state=AnswerState.waiting_for_answer)
async def finish_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    question_id = data['question_id']

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    delete_question(question_id)

    await bot.send_message(message.from_user.id, "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=admin_menu_keyboard())
    await state.finish()

@dp.message_handler(state=AnswerState.waiting_for_answer)
async def process_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['current_user_id']
    answer = message.text

    try:
        await bot.send_message(chat_id=user_id, text=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: {answer}")
        await bot.send_message(chat_id=message.from_user.id, text="–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await bot.send_message(chat_id=message.from_user.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.")



# Handler for approval and rejection of receipts
@dp.callback_query_handler(lambda c: c.data.startswith('approve_') or c.data.startswith('reject_'))
async def handle_receipt_action(callback_query: types.CallbackQuery):
    action, receipt_id = callback_query.data.split('_')
    receipt = get_user_receipts(receipt_id)

    if not receipt:
        await bot.answer_callback_query(callback_query.id, text="–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    user_id = receipt[1]
    selected_tariff = receipt[3]

    if action == 'approve':
        update_receipt_status(receipt_id, 'approved')
        update_user_status(user_id, 'active')
        update_user_tariff(user_id, selected_tariff)
        delete_receipt(receipt_id)
        await bot.send_message(callback_query.from_user.id, f"–ß–µ–∫ {receipt_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
        try:
            await bot.send_message(user_id, "–í–∞—à —á–µ–∫ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.send_message(user_id, "–ù–∞–∂–º–∏ –Ω–∞ /start —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")
        except Exception as e:
            logger.error(f"Error sending message to user {user_id}: {e}")

    elif action == 'reject':
        update_receipt_status(receipt_id, 'rejected')
        await bot.send_message(callback_query.from_user.id, f"–ß–µ–∫ {receipt_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç–∞—Ä–∏—Ñ–∞ "–°—Ç–∞—Ä—Ç"
@dp.message_handler(lambda message: message.text == "üåü –¢–∞—Ä–∏—Ñ –°—Ç–∞—Ä—Ç üåü")
async def start_tariff_menu(message: types.Message, state: FSMContext):
    keyboard = start_buttons()
    await delete_previous_message(message)
    await bot.send_message(message.from_user.id, "–ú–µ–Ω—é —Ç–∞—Ä–∏—Ñ–∞ '–°—Ç–∞—Ä—Ç':", reply_markup=keyboard)
    await StartTariffState.in_start_menu.set()



@dp.message_handler(lambda message: message.text == "ChatGPT", state=StartTariffState.in_start_menu)
async def chatgpt(message: types.Message):
    await delete_previous_message(message)
    await bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatGPT! –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=back_button())
    await StartTariffState.in_chatgpt.set()

# –æ–±—Ä–æ–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥", state=StartTariffState.in_chatgpt)
async def back_to_start_menu_from_chatgpt(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = check_user_exists(user_id)
    await delete_previous_message(message)
    if user:
        tariff = user[5]
        if tariff == "üåü –¢–∞—Ä–∏—Ñ –°—Ç–∞—Ä—Ç üåü":
            keyboard = start_buttons()
        elif tariff == "üöÄ –¢–∞—Ä–∏—Ñ –†–∞–∑–≤–∏—Ç–∏–µ üöÄ":
            keyboard = development_buttons()
        elif tariff == "üíº –¢–∞—Ä–∏—Ñ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª üíº":
            keyboard = professional_buttons()
        await bot.send_message(user_id, "–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω:", reply_markup=keyboard)
        await StartTariffState.in_start_menu.set()


@dp.message_handler(state=StartTariffState.in_chatgpt)
async def handle_chatgpt_question(message: types.Message, state: FSMContext):
    user_question = message.text
    await bot.send_message(message.from_user.id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")

    try:
        logger.info(f"User question: {user_question}")
        answer = generate_response(user_question)
        logger.info(f"ChatGPT response: {answer}")
        await bot.send_message(message.from_user.id, answer, reply_markup=back_button())
    except Exception as e:
        await bot.send_message(message.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=back_button())
        logger.error(f"Error handling ChatGPT question: {e}")


@dp.message_handler(lambda message: message.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", state=StartTariffState.in_start_menu)
async def contact_manager(message: types.Message):
    await delete_previous_message(message)
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.", reply_markup=back_button())
    await PaymentState.waiting_for_question.set()


@dp.callback_query_handler(lambda c: c.data == 'back_to_start_menu', state=StartTariffState.in_profile_menu)
async def back_to_start_menu_from_profile(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = start_buttons()
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, "–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω:", reply_markup=keyboard)
    await StartTariffState.in_start_menu.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—ã–ª–∫–∞"
@dp.message_handler(lambda message: message.text == "üìß –†–∞—Å—Å—ã–ª–∫–∞", state='*')
async def start_broadcast(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        await bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        await delete_previous_message(message)
        return

    await bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await BroadcastState.waiting_for_text.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(state=BroadcastState.waiting_for_text)
async def process_broadcast_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await delete_previous_message(message)
    await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –º–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Ñ–∞–π–ª), –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ù–µ—Ç', –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ—Ç:")
    await BroadcastState.waiting_for_media.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.VIDEO, types.ContentType.DOCUMENT, types.ContentType.TEXT], state=BroadcastState.waiting_for_media)
async def process_broadcast_media(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = data.get('text')

    if message.text and message.text.lower() == '–Ω–µ—Ç':
        media = None
    elif message.photo:
        media = message.photo[-1].file_id
    elif message.video:
        media = message.video.file_id
    elif message.document:
        media = message.document.file_id
    else:
        media = None

    users = get_all_users()
    for user in users:
        try:
            if media:
                if message.photo:
                    await bot.send_photo(chat_id=user[0], photo=media, caption=text)
                elif message.video:
                    await bot.send_video(chat_id=user[0], video=media, caption=text)
                elif message.document:
                    await bot.send_document(chat_id=user[0], document=media, caption=text)
            else:
                await bot.send_message(chat_id=user[0], text=text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")

    await delete_previous_message(message)
    await bot.send_message(chat_id=message.from_user.id, text="–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", reply_markup=admin_menu_keyboard())
    await state.finish()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ UpgradeTariffState.in_payment
@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥", state=UpgradeTariffState.in_payment)
async def back_to_profile_menu_from_upgrade(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = check_user_exists(user_id)
    if user:
        tariff = user[5]
        if tariff == "üåü –¢–∞—Ä–∏—Ñ –°—Ç–∞—Ä—Ç üåü":
            await bot.send_message(user_id, "–ú–µ–Ω—é —Ç–∞—Ä–∏—Ñ–∞ '–°—Ç–∞—Ä—Ç':", reply_markup=start_buttons())
        elif tariff == "üöÄ –¢–∞—Ä–∏—Ñ –†–∞–∑–≤–∏—Ç–∏–µ üöÄ":
            await bot.send_message(user_id, "–ú–µ–Ω—é —Ç–∞—Ä–∏—Ñ–∞ '–†–∞–∑–≤–∏—Ç–∏–µ':", reply_markup=development_buttons())
        elif tariff == "üíº –¢–∞—Ä–∏—Ñ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª üíº":
            await bot.send_message(user_id, "–ú–µ–Ω—é —Ç–∞—Ä–∏—Ñ–∞ '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª':", reply_markup=professional_buttons())
    await StartTariffState.in_start_menu.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–ø–∞—Ä–≥–∞–ª–∫–∏
@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–ø–∞—Ä–≥–∞–ª–∫—É", state='*')
async def add_cheat_sheet(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    await CheatSheetState.waiting_for_title.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —à–ø–∞—Ä–≥–∞–ª–∫–∏:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —à–ø–∞—Ä–≥–∞–ª–∫–∏
@dp.message_handler(state=CheatSheetState.waiting_for_title)
async def process_cheat_sheet_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await CheatSheetState.waiting_for_content.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —à–ø–∞—Ä–≥–∞–ª–∫–∏:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —à–ø–∞—Ä–≥–∞–ª–∫–∏
@dp.message_handler(state=CheatSheetState.waiting_for_content)
async def process_cheat_sheet_content(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    title = user_data['title']
    content = message.text

    cheat_sheet_id = save_cheat_sheet(title, content)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–ø–∞—Ä–≥–∞–ª–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    await state.update_data(cheat_sheet_id=cheat_sheet_id)
    await CheatSheetState.waiting_for_files.set()
    await message.reply("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç', –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä —à–ø–∞—Ä–≥–∞–ª–æ–∫"
@dp.message_handler(lambda message: message.text == "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä —à–ø–∞—Ä–≥–∞–ª–æ–∫", state='*')
async def list_cheat_sheets(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    cheat_sheets = get_cheat_sheets()
    if cheat_sheets:
        for sheet in cheat_sheets:
            response_text = f"ID: {sheet['id']}\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {sheet['title']}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {sheet['content']}\n–§–∞–π–ª—ã:\n"
            for file in sheet['files']:
                response_text += f" - File ID: {file['file_id']} (–¢–∏–ø: {file['file_type']})\n"
            await message.reply(response_text)

            media = []
            documents = []
            for file in sheet['files']:
                if file['file_type'] == 'photo':
                    media.append(types.InputMediaPhoto(media=file['file_id']))
                elif file['file_type'] == 'video':
                    media.append(types.InputMediaVideo(media=file['file_id']))
                elif file['file_type'] == 'document':
                    documents.append(file['file_id'])

            if media:
                await bot.send_media_group(message.chat.id, media=media)

            for doc in documents:
                await bot.send_document(message.chat.id, document=doc)
    else:
        await message.reply("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —à–ø–∞—Ä–≥–∞–ª–æ–∫.")

@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.VIDEO, types.ContentType.DOCUMENT, types.ContentType.TEXT], state=CheatSheetState.waiting_for_files)
async def process_cheat_sheet_files(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    cheat_sheet_id = user_data['cheat_sheet_id']

    if message.text and message.text.lower() == '–Ω–µ—Ç':
        await state.finish()
        await message.reply("–®–ø–∞—Ä–≥–∞–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=admin_menu_keyboard())
        return

    if message.photo:
        file_id = message.photo[-1].file_id
        file_type = 'photo'
    elif message.video:
        file_id = message.video.file_id
        file_type = 'video'
    elif message.document:
        file_id = message.document.file_id
        file_type = 'document'
    else:
        return

    save_cheat_sheet_file(cheat_sheet_id, file_id, file_type)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    await message.reply("–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç', –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.")


@dp.message_handler(lambda message: message.text == "üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", state=StartTariffState.in_start_menu)
async def useful_materials(message: types.Message):
    cheat_sheets = get_cheat_sheets()
    if cheat_sheets:
        for sheet in cheat_sheets:
            response_text = f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {sheet['title']}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {sheet['content']}"
            await message.reply(response_text)

            media = []
            documents = []
            for file in sheet['files']:
                if file['file_type'] == 'photo':
                    media.append(types.InputMediaPhoto(media=file['file_id']))
                elif file['file_type'] == 'video':
                    media.append(types.InputMediaVideo(media=file['file_id']))
                elif file['file_type'] == 'document':
                    documents.append(file['file_id'])

            if media:
                await bot.send_media_group(message.chat.id, media=media)

            for doc in documents:
                await bot.send_document(message.chat.id, document=doc)
    else:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–ø–∞—Ä–≥–∞–ª–æ–∫.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–ø–∞—Ä–≥–∞–ª–∫–∏
@dp.message_handler(lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–ø–∞—Ä–≥–∞–ª–∫—É", state='*')
async def choose_cheat_sheet_to_edit(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    cheat_sheets = get_cheat_sheets()
    if cheat_sheets:
        buttons = [InlineKeyboardButton(sheet['title'], callback_data=f"edit_{sheet['id']}") for sheet in cheat_sheets]
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(*buttons)
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —à–ø–∞—Ä–≥–∞–ª–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    else:
        await message.reply("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —à–ø–∞—Ä–≥–∞–ª–æ–∫.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —à–ø–∞—Ä–≥–∞–ª–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('edit_'), state='*')
async def edit_cheat_sheet(callback_query: types.CallbackQuery, state: FSMContext):
    cheat_sheet_id = int(callback_query.data.split('_')[1])
    await state.update_data(cheat_sheet_id=cheat_sheet_id)

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫', callback_data='title_edit'))
    keyboard.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', callback_data='content_edit'))
    keyboard.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã', callback_data='remove_files'))
    keyboard.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —à–ø–∞—Ä–≥–∞–ª–∫—É', callback_data='delete_cheat_sheet'))

    await bot.send_message(callback_query.from_user.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
    await CheatSheetState.waiting_for_edit_choice.set()



@dp.callback_query_handler(lambda c: c.data == 'title_edit', state=CheatSheetState.waiting_for_edit_choice)
async def edit_cheat_sheet_title(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(f"Editing title for cheat sheet")
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —à–ø–∞—Ä–≥–∞–ª–∫–∏:")
    await CheatSheetState.waiting_for_new_title.set()


@dp.message_handler(state=CheatSheetState.waiting_for_new_title)
async def process_new_cheat_sheet_title(message: types.Message, state: FSMContext):
    logger.info(f"Processing new title: {message.text}")
    new_title = message.text
    user_data = await state.get_data()
    cheat_sheet_id = user_data['cheat_sheet_id']
    logger.info(f"Updating cheat sheet {cheat_sheet_id} with new title {new_title}")
    cheat_sheet = get_cheat_sheet_by_id(cheat_sheet_id)
    update_cheat_sheet(cheat_sheet_id, new_title, cheat_sheet['content'])
    await state.finish()
    await message.reply("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —à–ø–∞—Ä–≥–∞–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=admin_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —à–ø–∞—Ä–≥–∞–ª–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'content_edit', state=CheatSheetState.waiting_for_edit_choice)
async def edit_cheat_sheet_content(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —à–ø–∞—Ä–≥–∞–ª–∫–∏:")
    await CheatSheetState.waiting_for_new_content.set()
    await CheatSheetState.waiting_for_new_content.set()


@dp.message_handler(state=CheatSheetState.waiting_for_new_content)
async def process_new_cheat_sheet_content(message: types.Message, state: FSMContext):
    new_content = message.text
    user_data = await state.get_data()
    cheat_sheet_id = user_data['cheat_sheet_id']
    cheat_sheet = get_cheat_sheet_by_id(cheat_sheet_id)
    update_cheat_sheet(cheat_sheet_id, cheat_sheet['title'], new_content)
    await state.finish()
    await message.reply("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —à–ø–∞—Ä–≥–∞–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=admin_menu_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ —à–ø–∞—Ä–≥–∞–ª–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'remove_files', state=CheatSheetState.waiting_for_edit_choice)
async def choose_file_to_remove(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    cheat_sheet_id = user_data['cheat_sheet_id']
    cheat_sheet = get_cheat_sheet_by_id(cheat_sheet_id)

    buttons = [InlineKeyboardButton(f"{file['file_type']}", callback_data=f"remove_file_{file['id']}") for file in
               cheat_sheet['files']]
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await CheatSheetState.waiting_for_file_removal.set()


@dp.callback_query_handler(lambda c: c.data.startswith('remove_file_'), state=CheatSheetState.waiting_for_file_removal)
async def remove_file_from_cheat_sheet(callback_query: types.CallbackQuery, state: FSMContext):
    file_id = int(callback_query.data.split('_')[2])
    delete_cheat_sheet_file(file_id)
    await state.finish()
    await bot.send_message(callback_query.from_user.id, "–§–∞–π–ª —É–¥–∞–ª–µ–Ω.", reply_markup=admin_menu_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à–ø–∞—Ä–≥–∞–ª–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'delete_cheat_sheet', state=CheatSheetState.waiting_for_edit_choice)
async def delete_cheat_sheet_handler(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    cheat_sheet_id = user_data['cheat_sheet_id']
    delete_cheat_sheet(cheat_sheet_id)
    await state.finish()
    await bot.send_message(callback_query.from_user.id, "–®–ø–∞—Ä–≥–∞–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=admin_menu_keyboard())

@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", state='*')
async def add_admin_start(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    await AddAdminState.waiting_for_admin_id.set()
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")


@dp.message_handler(state=AddAdminState.waiting_for_admin_id)
async def process_new_admin_id(message: types.Message, state: FSMContext):
    try:
        new_admin_id = int(message.text)
        ADMINS.append(new_admin_id)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫
        await state.finish()
        await message.reply(f"ID {new_admin_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.", reply_markup=admin_menu_keyboard())
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")


@dp.message_handler(lambda message: message.text == "–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def list_user_answers(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        await bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        await delete_previous_message(message)
        return

    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute("""
        SELECT ua.user_id, u.username, ua.question, ua.answer 
        FROM user_answers ua
        JOIN users u ON ua.user_id = u.tg_id
    """)
    answers = cursor.fetchall()
    conn.close()

    if answers:
        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 20 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        chunk_size = 20
        chunks = [answers[i:i + chunk_size] for i in range(0, len(answers), chunk_size)]

        for chunk in chunks:
            answers_text = "\n\n".join(
                [f"Username: {username}\n–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç: {answer}" for user_id, username, question, answer in
                 chunk])
            await bot.send_message(user_id, answers_text)
    else:
        await bot.send_message(user_id, "–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await delete_previous_message(message)